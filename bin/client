#!/usr/bin/env ruby

require 'forwardable'
require 'pry'
require 'xmpp4r'
require 'xmpp4r/client'
require 'xmpp4r/muc'
require 'xmpp4r/roster'


$stdout.sync = true

JID     = ARGV.shift
PASS    = File.read(ARGV.shift).chomp
LOGGER  = Logger.new($stdout).tap do |o|
  #o.level     = Logger::DEBUG
  o.level     = Logger::INFO
  o.formatter = proc do |severity, datetime, progname, message|
    "%s.%03i %s: %s\n" % [
      datetime.strftime('%FT%T'),
      datetime.usec / 1000,
      severity[0..0],
      message
    ]
  end
end


def log message
  print "\e[1G"
  LOGGER.info message
  Readline.refresh_line
end


class Client
  extend Forwardable
  def_delegators  :@client, :connect
  def_delegator   :@client, :close, :disconnect
  def_delegator   :@client, :send, :xsend

  def initialize jid
    @client = Jabber::Client.new(jid)
    setup_callbacks
  end

  def auth password
    @client.auth password
    setup_roster_callbacks
  end

  def presence type = :available
    @client.send Jabber::Presence.new.set_type(type).set_status('rborboting')
    :ok
  end

  def presence_subscribe jid
    @client.send Jabber::Presence.new.set_type(:subscribe).set_to(jid)
    :ok
  end

  def roster
    Jabber::Roster::Helper.new(@client)
  end

  def msg recipient, body
    @client.send Jabber::Message.new(recipient, body).tap { |o| o.type = :chat }
    :ok
  end

  def join channel
    muc = Jabber::MUC::SimpleMUCClient.new(@client)
    muc.on_message do |time, nick, text|
      log "[#{channel}] <#{nick}> #{text.inspect}"
    end
    muc.join Jabber::JID.new(channel)
    :ok
  end


  private

  def setup_callbacks
    @client.add_iq_callback do |iq|
      log iq.inspect
    end
    @client.add_message_callback do |message|
      case message.type
      when :chat
        log "<#{message.from}> #{message.body.inspect}"
      else
        log '%s <%s> %s' % [
          message.type,
          message.respond_to?(:from) ? message.from : '?',
          message.body
        ]
      end
    end
  end

  def setup_roster_callbacks
    roster = Jabber::Roster::Helper.new(@client)
    roster.add_update_callback do |olditem, item|
      log "ROSTER UPDATE: #{olditem.inspect} -> #{item.inspect}"
    end
    roster.add_presence_callback do |item, oldpresence, presence|
      log "PRESENCE UPDATE: #{item} / #{oldpresence.inspect} -> #{presence.inspect}"
    end
    roster.add_subscription_callback do |item, presence|
      log "SUBSCRIPTION: #{item.inspect} / #{presence.inspect}"
    end
    roster.add_subscription_request_callback do |item, presence|
      log "SUBSCRIPTION REQUEST: #{item.inspect} / #{presence.inspect}"
      log "*#{presence.from}* requests subscribe to us"
      roster.accept_subscription presence.from
      msg presence.from, <<-eoh
Hello #{presence.from},

  I'm allowing you to subscribe to my presence, as you requested.

regards,

rborbot the bot
eoh
      presence_subscribe presence.from
    end
  end
end

class Interactor
  PRY_PRINT = proc do |output, value, _pry_|
    next if value == :ok
    _pry_.pager.open do |pager|
      pager.print _pry_.config.output_prefix
      Pry::ColorPrinter.pp(value, pager, Pry::Terminal.width! - 1)
    end
  end

  PRY_PROMPT = %w[> *].map.with_index do |char, i|
    proc do |target_self, nest_level, pry|
      case target_self
      when self
        char + ' '
      else
        Pry::DEFAULT_PROMPT[i].call target_self, nest_level, pry
      end
    end
  end

  class << self
    def run_authenticated jid, password = nil
      i = new jid
      i.connect
      i.auth password if password
      i.presence
      Pry.start i, print: PRY_PRINT, prompt: PRY_PROMPT
      i.terminate
    end
  end

  extend Forwardable
  def_delegators :@client, :connect, :register_info, :auth,
    :presence, :roster,
    :msg, :join
  def_delegator :@client, :presence_subscribe, :subscribe

  def initialize jid
    @client = Client.new(jid)
  end

  def terminate
    @client.disconnect
  end

  def register
    puts 'password:'
    password = $stdin.gets.chomp
    @client.register password
  end

  def chpass
    puts 'password:'
    password = $stdin.gets.chomp
    @client.password = password
  end
end


#Jabber.debug = true
Interactor.run_authenticated(JID, PASS)
